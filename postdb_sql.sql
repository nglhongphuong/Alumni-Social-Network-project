use postdb;
-- B·∫£ng ch√≠nh
CREATE TABLE User (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(100) NOT NULL,
    name VARCHAR(100) NOT NULL,        -- T√™n ng∆∞·ªùi d√πng
    birthday DATE,                     -- Ng√†y sinh nh·∫≠t
    gender ENUM('MALE', 'FEMALE') NOT NULL,
    password VARCHAR(255) NOT NULL,
    role ENUM('ROLE_ADMIN', 'ROLE_ALUMNI', 'ROLE_LECTURER') NOT NULL,
    
    bio TEXT,                          -- Ti·ªÉu s·ª≠ / gi·ªõi thi·ªáu b·∫£n th√¢n
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    update_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    is_active BOOLEAN DEFAULT FALSE,   -- Ch·ªù admin x√°c nh·∫≠n
    avatar VARCHAR(255),
    cover_photo VARCHAR(255)
);


-- B·∫£ng Alumni (m·ªëi quan h·ªá 1-1 v·ªõi User)
CREATE TABLE Alumni (
    user_id INT PRIMARY KEY,
    student_code VARCHAR(50) UNIQUE NOT NULL,
    FOREIGN KEY (user_id) REFERENCES User(id) ON DELETE CASCADE
);

-- B·∫£ng Admin (m·ªëi quan h·ªá 1-1 v·ªõi User)
CREATE TABLE Admin (
    user_id INT PRIMARY KEY,
    FOREIGN KEY (user_id) REFERENCES User(id) ON DELETE CASCADE
);

-- B·∫£ng Lecturer (m·ªëi quan h·ªá 1-1 v·ªõi User)
CREATE TABLE Lecturer (
    user_id INT PRIMARY KEY,
    FOREIGN KEY (user_id) REFERENCES User(id) ON DELETE CASCADE
);

-- B·∫£ng TimeOut (m·ªëi quan h·ªá 1-1 v·ªõi lecturer)  CURRENT_TIMESTAMP + INTERVAL 24 HOUR
CREATE TABLE TimeOut (
    lecturer_id INT PRIMARY KEY,
    expired_at DATETIME DEFAULT CURRENT_TIMESTAMP, -- Th·ªùi gian phi√™n l√†m vi·ªác h·∫øt h·∫°n.
    FOREIGN KEY (lecturer_id) REFERENCES Lecturer(user_id) ON DELETE CASCADE
);

-- B·∫£ng Posts (m·ªëi quan h·ªá 1 - N v·ªõi User )
CREATE TABLE Post (
	id INT AUTO_INCREMENT PRIMARY KEY,
	user_id INT,
    content TEXT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    is_comment_locked BOOLEAN DEFAULT FALSE, -- Khoa binh luan khong
    image VARCHAR(255),
	visibility ENUM('PRIVATE', 'PUBLIC') NOT NULL DEFAULT 'PUBLIC',
    FOREIGN KEY (user_id) REFERENCES User(id) ON DELETE CASCADE
);

-- B·∫£ng comment ( B·∫£ng sinh ra t·ª´ m·ªëi quan h·ªá N-N gi·ªØa user-post)
CREATE TABLE Comment (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    post_id INT NOT NULL,
    content TEXT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES User(id),
    FOREIGN KEY (post_id) REFERENCES Post(id)
);

-- B·∫£ng Reaction ( 1 ng∆∞·ªùi c√≥ th·ªÉ like nhi·ªÅu b√†i nh∆∞ng 1 like duy nh·∫•t v·ªõi b√†i post ƒë√≥)
CREATE TABLE Reaction (
    user_id INT NOT NULL,
    post_id INT NOT NULL,
    reaction_type ENUM('LIKE', 'LOVE', 'HAHA', 'WOW', 'SAD', 'ANGRY') NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, post_id),  -- ch·ªâ cho 1 reaction/post/user
    FOREIGN KEY (user_id) REFERENCES User(id),
    FOREIGN KEY (post_id) REFERENCES Post(id)
);

-- B·∫£ng SurveyPost (M·ªëi quan h·ªá N - 1 v·ªõi Admin)

CREATE TABLE SurveyPost (
    id INT AUTO_INCREMENT PRIMARY KEY,
    admin_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    start_date DATETIME,
    end_date DATETIME,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    update_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    status ENUM('DRAFT', 'PUBLISH', 'CLOSED') NOT NULL DEFAULT 'DRAFT',
    FOREIGN KEY (admin_id) REFERENCES Admin(user_id) ON DELETE CASCADE
);

-- B·∫£ng SurveyQuestion (M·ªëi quan h·ªá N - 1 v·ªõi Survey Post )
CREATE TABLE SurveyQuestion (
    id INT AUTO_INCREMENT PRIMARY KEY,
    survey_id INT NOT NULL,
    content TEXT NOT NULL,
    response_type ENUM('SINGLE_CHOICE', 'MULTIPLE_CHOICE', 'TEXT') NOT NULL DEFAULT 'SINGLE_CHOICE',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	update_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (survey_id) REFERENCES SurveyPost(id) ON DELETE CASCADE
);

-- B·∫£ng Survey Option (M·ªëi quan h·ªá N - 1 survey question)
CREATE TABLE SurveyOption (
    id INT AUTO_INCREMENT PRIMARY KEY,
    question_id INT NOT NULL,
    content VARCHAR(555),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    update_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (question_id) REFERENCES SurveyQuestion(id) ON DELETE CASCADE
);

-- B·∫£ng ResponseOption sinh ra t·ª´ uSER V√Ä Survey Option
CREATE TABLE ResponseOption (
    user_id INT NOT NULL,
    option_id INT NOT NULL,
    responded_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, option_id),
    FOREIGN KEY (user_id) REFERENCES User(id) ON DELETE CASCADE,
    FOREIGN KEY (option_id) REFERENCES SurveyOption(id) ON DELETE CASCADE
);

-- B·∫£ng Invitation Post (M·ªëi quan h·ªá N-1 Admin)
CREATE TABLE InvitationPost (
    id INT AUTO_INCREMENT PRIMARY KEY,
    admin_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    recipient_scope ENUM('INDIVIDUAL', 'ROLE_GROUP', 'CUSTOM_GROUP', 'ALL') DEFAULT 'ALL',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    update_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (admin_id) REFERENCES Admin(user_id) ON DELETE CASCADE
);

-- B·∫£ng InvitationRecipient sinh ra t·ª´ m·ªëi quan h·ªá nhi·ªÅu nhi·ªÅu gi·ªØa user v√† inviation post
CREATE TABLE InvitationRecipient (
    user_id INT NOT NULL,
    invitation_post_id INT NOT NULL,
    PRIMARY KEY (user_id, invitation_post_id),
    FOREIGN KEY (user_id) REFERENCES User(id) ON DELETE CASCADE,
    FOREIGN KEY (invitation_post_id) REFERENCES InvitationPost(id) ON DELETE CASCADE
);

INSERT INTO User (username, name, birthday, gender, password, role, is_active, avatar, cover_photo, bio)
VALUES 
('2251010077phuong@ou.edu.vn', 'Ph∆∞∆°ng Mai', '2002-07-15', 'FEMALE', '$2a$10$G5UfJIJSx.0EEiQ4IZgHmuw98uZH0SvmT94fqr.nchW3QCc8RKzjW', 'ROLE_ADMIN', TRUE, 'phuong.jpg', 'phuong_cover.jpg', 'Y√™u thi√™n vƒÉn, ƒëam m√™ k·∫øt n·ªëi c·ªông ƒë·ªìng OU.'),
('nguyenluhongphuong@gmail.com', 'L·ªØ H·ªìng Ph∆∞∆°ng', '1990-03-12', 'MALE', '123456', 'ROLE_LECTURER', TRUE, 'tuan.jpg', 'tuan_cover.jpg', 'Th·∫ßy Ph∆∞∆°ng si√™u ng·∫ßu, th√≠ch React, hay m·ªùi tr√† s·ªØa sinh vi√™n.'),
('2251010062mai@ou.edu.vn', 'Mai Tr√∫c', '2002-09-09', 'FEMALE', '123456', 'ROLE_ALUMNI', TRUE, 'mai.jpg', 'mai_cover.jpg', 'C·ª±u sinh vi√™n ng√†nh Marketing, ƒëam m√™ t·ªï ch·ª©c s·ª± ki·ªán.'),
('nam@ou.edu.vn', 'VƒÉn Nam', '2001-05-25', 'MALE', '123456', 'ROLE_ALUMNI', TRUE, 'nam.jpg', 'nam_cover.jpg', 'T·ª´ng l√† leader c√¢u l·∫°c b·ªô Truy·ªÅn Th√¥ng, hi·ªán ƒëang l√†m Designer.'),
('hoa@ou.edu.vn', 'C√¥ Hoa', '1987-11-30', 'FEMALE', '123456', 'ROLE_LECTURER', TRUE, 'hoa.jpg', 'hoa_cover.jpg', 'Gi·∫£ng vi√™n t√¢m l√Ω h·ªçc, th√≠ch n√≥i chuy·ªán nh·∫π nh√†ng v·ªõi sinh vi√™n.');

-- Admin: phuong (id = 1)
INSERT INTO Admin (user_id) VALUES (1);

-- Lecturers: tuan (2), hoa (5)
INSERT INTO Lecturer (user_id) VALUES (2), (5);

-- Alumni: mai (3), nam (4)
INSERT INTO Alumni (user_id, student_code)
VALUES (3, 'A001'), (4, 'A002');

INSERT INTO Post (user_id, content, image, visibility)
VALUES 
(3, 'H√¥m nay tr·ªùi ƒë·∫πp qu√°!', NULL, 'PUBLIC'),
(4, 'M√¨nh m·ªõi t·ªët nghi·ªáp n√®!', 'grad.jpg', 'PUBLIC'),
(2, 'Nh·ªõ gi·ªØ s·ª©c kho·∫ª khi √¥n thi nh√©!', NULL, 'PUBLIC');

INSERT INTO SurveyPost (admin_id, title, description, start_date, end_date, status)
VALUES 
(1, 'Kh·∫£o s√°t ho·∫°t ƒë·ªông ngo·∫°i kho√°', 'Gi√∫p nh√† tr∆∞·ªùng l√™n k·∫ø ho·∫°ch t·ªët h∆°n', NOW(), NOW() + INTERVAL 7 DAY, 'PUBLISH');

-- Question cho survey id = 1
INSERT INTO SurveyQuestion (survey_id, content, response_type)
VALUES (1, 'B·∫°n c√≥ mu·ªën tham gia ho·∫°t ƒë·ªông ngo√†i tr·ªùi kh√¥ng?', 'SINGLE_CHOICE');

-- Option cho question id = 1
INSERT INTO SurveyOption (question_id, content)
VALUES 
(1, 'C√≥'),
(1, 'Kh√¥ng'),
(1, 'Tu·ª≥ th·ªùi ti·∫øt');

-- mai ch·ªçn "C√≥", nam ch·ªçn "Kh√¥ng"
INSERT INTO ResponseOption (user_id, option_id)
VALUES 
(3, 1),  -- mai ch·ªçn 'C√≥'
(4, 2);  -- nam ch·ªçn 'Kh√¥ng'

-- T·∫°o m·ªôt l·ªùi m·ªùi b·ªüi admin id = 1
INSERT INTO InvitationPost (admin_id, title, content, recipient_scope)
VALUES (1, 'Tham gia ch∆∞∆°ng tr√¨nh thi·ªán nguy·ªán', 'Ch√∫ng ta s·∫Ω ƒëi ƒë·∫øn B√¨nh Ph∆∞·ªõc d·ªãp T·∫øt.', 'ALL');

-- G·ª≠i ƒë·∫øn user id: 2, 3, 4
INSERT INTO InvitationRecipient (user_id, invitation_post_id)
VALUES 
(2, 1),
(3, 1),
(4, 1);

INSERT INTO Comment (user_id, post_id, content)
VALUES 
(2, 1, 'B√†i vi·∫øt hay qu√° em ∆°i!'),
(3, 1, 'Tr·ªùi h√¥m nay th·∫≠t ƒë·∫πp thi·ªát!'),
(4, 2, 'Ch√∫c m·ª´ng b·∫°n t·ªët nghi·ªáp nh√©! üéâ'),
(3, 3, 'D·∫° em c·∫£m ∆°n th·∫ßy, em s·∫Ω c·ªë g·∫Øng ·∫°!'),
(4, 3, 'B√†i vi·∫øt h·ªØu √≠ch qu√°!');

INSERT INTO Reaction (user_id, post_id, reaction_type)
VALUES 
(3, 1, 'LIKE'),
(4, 1, 'LOVE'),
(2, 2, 'WOW'),
(3, 2, 'HAHA'),
(4, 3, 'SAD');
